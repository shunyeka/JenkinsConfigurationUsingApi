<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.35">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.9"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.9">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.8">
      <siteName>https://shibani.atlassian.net/</siteName>
    </hudson.plugins.jira.JiraProjectProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.74">
    <script>pipeline { 
  agent any
  environment {
    SELENIUM_CHROME_DRIVER_PATH = &apos;/usr/bin/chromedriver&apos;
    DEMO_APP_URL = &apos;http://localhost:8082/Login.jsp&apos;
  }
  tools {
    maven &apos;maven3.6&apos;
  }
  stages { 
//     stage(&apos;Start SonarQube Server&apos;) {
//         steps {
//             script {
//                 sh &apos;&apos;&apos;
//                 docker pull library/sonarqube:latest
//                 docker run -d -p 9000:9000 sonarqube &apos;&apos;&apos;
//                 sleep 100
//             }
//         }
//     }
    stage(&apos;Source Code Checkkout&apos;){
        steps {
            script {
                timestamps {
                    logstash {
                        checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/with-snar-config&apos;]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: &apos;shunyeka-github&apos;, url: &apos;https://github.com/shunyeka/demo-auto-testing.git&apos;]]])
                        echo &quot;successfully checkout completed&quot;
                    }
                }
            } 
        }
    } 
    stage(&apos;Static Code Analysis&apos;) { 
      parallel { 
        stage(&apos;Snyk Test&apos;) { 
            steps { 
                script {
                    timestamps {
                        logstash {
                            sh &apos;mvn -Dmaven.test.failure.ignore=true snyk:test&apos;
                            //sh &apos;mvn -Dmaven.test.failure.ignore=true snyk:monitor&apos;
                        } 
                    }
                }
            }
        } 
        stage(&apos;SonarQube Test&apos;) { 
            steps { 
                script {
                    timestamps {
                        logstash {
                            sh &apos;mvn -Dmaven.test.failure.ignore=true -Dmaven.test.skip=true clean package org.sonarsource.scanner.maven:sonar-maven-plugin:3.3.0.603:sonar&apos;
                            }
                        }
                    }
                } 
            } 
        } 
    } 
    stage(&apos;Build&apos;) { 
        steps { 
            script {
                timestamps {
                    logstash {
                        sh &apos;mvn -Dmaven.test.failure.ignore=true -Dmaven.test.skip=true clean package&apos; 
                        sh &apos;mv -f target/*.war target/${JOB_NAME}-${BUILD_NUMBER}.war&apos;
                    }
                }
            }
        } 
    } 
    stage(&apos;Create Test Environment&apos;) { 
        steps { 
            script {
                timestamps {
                    logstash {
                        sh &apos;mvn jetty:run-war -Djetty.port=8082 -Dmaven.test.failure.ignore=true -Dmaven.test.skip=true &amp;&apos; 
                        sleep 40
                    }
                }
            }
        } 
    } 
    stage(&apos;Automated Testing&apos;) { 
      parallel { 
        stage(&apos;JUnit Test&apos;) { 
            steps { 
                script {
                    timestamps {
                        logstash {
                            sh &apos;mvn -Dmaven.test.failure.ignore=true -Dtest=TestWelcome#testUserValidateJunit test&apos; 
                        }
                    }
                }
            }
        }
        stage(&apos;Seleniun Test&apos;) { 
            steps { 
                script {
                    timestamps {
                        logstash {
                            sh &apos;mvn -Dmaven.test.failure.ignore=true -Dtest=TestWelcome#testUserValidateSelenium -Dselenium.browser=chrome -Dwebdriver.chrome.driver=/usr/bin/chromedriver test&apos;
                            }
                        }
                    }
                } 
            } 
        }
    }
    stage(&apos;Manual Test&apos;) {
        steps {
            script {
                timestamps {
                    logstash {
                        user_input=input message: &apos;Manual Test Passed?&apos;, submitterParameter: &apos;user_input&apos;
                        sh &apos;pkill -f jetty&apos;
                        // sh &apos;docker kill $(docker ps -q --filter publish=9000)&apos;
                    }
                }
            }
        }
    }
    stage(&apos;Storing Artifact&apos;) { 
      parallel { 
        stage(&apos;Publish to s3&apos;) {
            steps {
                script {
                    timestamps {
                        logstash {
                            user_input=input message: &apos;Do you want to publish the Artifact to s3 ?&apos;, submitterParameter: &apos;user_input&apos;
                            s3Upload consoleLogLevel: &apos;INFO&apos;, dontWaitForConcurrentBuildCompletion: false, entries: [[bucket: &apos;s3-artifact-s&apos;, excludedFile: &apos;&apos;, flatten: false, gzipFiles: true, keepForever: false, managedArtifacts: false, noUploadOnFailure: true, selectedRegion: &apos;us-east-2&apos;, showDirectlyInBrowser: false, sourceFile: &apos;target/${JOB_NAME}-${BUILD_NUMBER}.war&apos;, storageClass: &apos;STANDARD&apos;, uploadFromSlave: false, useServerSideEncryption: false]], pluginFailureResultConstraint: &apos;FAILURE&apos;, profileName: &apos;s3-artifact-s&apos;, userMetadata: []
                        }
                    }
                }
            }
        } 
        stage(&apos;DockerHub&apos;) { 
            steps { 
                timestamps {
                    logstash {
                        echo &apos;stored successfully.&apos;
                    }
                }
            } 
        } 
        stage(&apos;AWS ECR&apos;) { 
            steps {
                timestamps {
                    logstash {
                        echo &apos;storing successfully.&apos;
                        }
                    }
                } 
            } 
        } 
    } 
    stage(&apos;JIRA Create Issue&apos;) {
        steps {
            timestamps {
                logstash {
                    withCredentials([[$class: &apos;UsernamePasswordMultiBinding&apos;, credentialsId: &apos;jira-credentials&apos;, usernameVariable: &apos;USERNAME&apos;, passwordVariable: &apos;PASSWORD&apos;]]) {
                    sh label: &apos;&apos;, script: &apos;&apos;&apos;
                        jira_credential=&quot;${USERNAME}:${PASSWORD}&quot;
                        jira_curl_body=&quot;{\\&quot;update\\&quot;: {},\\&quot;fields\\&quot;: {\\&quot;summary\\&quot;: \\&quot;${JOB_NAME}-${BUILD_NUMBER}\\&quot;,\\&quot;project\\&quot;: {\\&quot;key\\&quot;: \\&quot;FP\\&quot; },\\&quot;issuetype\\&quot;: {\\&quot;id\\&quot;: \\&quot;10005\\&quot;}, \\&quot;description\\&quot;: { \\&quot;type\\&quot;: \\&quot;doc\\&quot;, \\&quot;version\\&quot;: 1, \\&quot;content\\&quot;: [ { \\&quot;type\\&quot;: \\&quot;paragraph\\&quot;, \\&quot;content\\&quot;: [ { \\&quot;text\\&quot;: \\&quot;Issue created by jenkins.\\&quot;, \\&quot;type\\&quot;: \\&quot;text\\&quot; } ] } ] } } }&quot;
                        curl --request POST \\
                        --url \&apos;https://shibani.atlassian.net/rest/api/3/issue\&apos; \\
                        --user &quot;${jira_credential}&quot; \\
                        --header \&apos;Accept: application/json\&apos; \\
                        --header \&apos;Content-Type: application/json\&apos; \\
                        -d &quot;${jira_curl_body}&quot; -o &apos;jira-issue.json&apos; 
                        JIRA_KEY=$(jq -r &apos;.id&apos; jira-issue.json)
                        JIRA_URL=&quot;https://shibani.atlassian.net/rest/api/3/issue/${JIRA_KEY}/attachments&quot;                
                        curl -D- -u &quot;${jira_credential}&quot; -X POST -H &quot;X-Atlassian-Token: no-check&quot; -F &quot;file=@jira-issue.json&quot; $JIRA_URL
                        &apos;&apos;&apos;
                        }
                    }
                }
            }
        }    
    }
    post {
        always {
            echo &quot;This is always executed&quot;
        }
        failure {
            timestamps {
                logstash {
                    echo &quot;BuildFailed&quot;                   
                }
            }
        }
    } 
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>