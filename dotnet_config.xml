<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.35">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.9"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.9">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.8">
      <siteName>https://shibani.atlassian.net/</siteName>
    </hudson.plugins.jira.JiraProjectProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.74">
    <script>pipeline { 
  agent any
      stages {
          stage(&apos;Source Code Checkkout&apos;){
              steps([$class: &apos;LogstashNotifier&apos;]) {
                    script {
                        timestamps {
                            logstash {
                                checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/master&apos;]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: &apos;shunyeka-github&apos;, url: &apos;https://github.com/shunyeka/sample-dotnet-project.git&apos;]]])
                                echo &quot;successfully checkout completed&quot;
                            }
                        }    
                    } 
                }
            }
            stage(&apos;Build Project&apos;){
              steps([$class: &apos;LogstashNotifier&apos;]) {
                    script {
                        timestamps {
                            logstash {
                                sh &apos;dotnet build&apos;
                                echo &apos;Successfully dotnet project built&apos;
                            }
                        }
                    } 
                }
            }
            stage(&apos;Unit Test&apos;){
              steps {
                    script {
                        timestamps {
                            logstash {
                                echo &apos;UnitTest is executed&apos;
                                sh &apos;dotnet test --filter UnitTest || error=true&apos;
                            }
                        }
                        
                    } 
                }
            }
            stage(&apos;Integration Test&apos;){
              steps {
                    script {
                        timestamps {
                            logstash {
                                echo &apos;IntegrationTest is executed&apos;
                                sh &apos;dotnet test --filter IntegrationTest || error=true&apos;
                            }
                        }
                    } 
                }
            }
            stage(&apos;Executing Project&apos;){
              steps {
                    script {
                        timestamps {
                            logstash {
                                sh &apos;dotnet run --project src/SampleApp &amp;&apos;
                                sh &apos;failure test&apos;
                                echo &apos;Application Deployement is going on....&apos;
                                echo &apos;It will take few seconds to complete....&apos;
                                sleep 30
                            }
                        }
                    } 
                }
            }
            stage(&apos;Generate HTTP link&apos;){
              steps {
                    script {
                        timestamps {
                            logstash {
                                echo &apos;http://18.217.32.211:5000/api/products&apos;
                            }
                        }
                    } 
                }
            }
            stage(&apos;Quit deployement&apos;) {
            steps {
                script {
                    timestamps {
                        logstash {
                            user_input=input message: &apos;Do you want to Quit the deployement?&apos;, submitterParameter: &apos;user_input&apos;
                            sh &apos;pkill -f SampleApp&apos;
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            echo &quot;This is always executed&quot;
        }
        failure {
            timestamps {
                logstash {
                    echo &quot;BuildFailed&quot;                   
                }
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>